// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id                Int                                   @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String                                @unique
  password          String
  phone_number      Int
  gender            Gender
  age               Int
  preferred_gender  Gender[]
  longitude         String
  latitude          String
  location          Unsupported("geography(Point, 4326)")
  geohash           String
  min_preferred_age Int
  max_preferred_age Int
  behaviour         Behaviour[]
  bloom_filter      String
  images            Images[]
  liked_by          Likes[]                               @relation("liked_by")
  liked_received    Likes[]                               @relation("liked_received")
  matched_id        Int
  matches           User[]                                @relation("matches")
  user              User?                                 @relation("matches", fields: [matched_id], references: [id])
  chats_received    Chats[]                               @relation("chats_received")
  chats_sent        Chats[]                               @relation("chats_sent")

  @@index([age, geohash])
}

model Images {
  id      Int     @id @default(autoincrement())
  url     String
  user_id Int
  user    User    @relation(fields: [user_id], references: [id])
  likes   Likes[]
}

model Behaviour {
  id       Int     @id @default(autoincrement())
  question String
  answer   String
  user_id  Int
  user     User    @relation(fields: [user_id], references: [id])
  likes    Likes[]
}

model Likes {
  id           Int        @id @default(autoincrement())
  image_id     Int?
  image        Images?    @relation(fields: [image_id], references: [id])
  liked_by     Int
  by_user      User       @relation("liked_by", fields: [liked_by], references: [id])
  liked_to     Int
  to_user      User       @relation("liked_received", fields: [liked_to], references: [id])
  behaviour_id Int?
  behaviour    Behaviour? @relation(fields: [behaviour_id], references: [id])
  comment      String
}

model Chats {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  message     String
  sender      User     @relation("chats_sent", fields: [sender_id], references: [id])
  receiver    User     @relation("chats_received", fields: [receiver_id], references: [id])
  created_at  DateTime @default(now())
}

enum Gender {
  Male
  Female
  Lesbian
}
